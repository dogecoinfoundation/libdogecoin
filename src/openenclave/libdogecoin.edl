enclave {
    from "openenclave/edl/syscall.edl" import *;
    from "openenclave/edl/logging.edl" import oe_write_ocall;
    from "openenclave/edl/sgx/cpu.edl" import oe_sgx_get_cpuid_table_ocall;

    struct data_t
    {
        [size=size] uint8_t* data;
        size_t size;
    };

    trusted {
        public void enclave_libdogecoin();
        public void enclave_libdogecoin_attest(uint8_t* report, size_t len);
        public void enclave_libdogecoin_run_example();
        public void enclave_libdogecoin_generate_encrypted_seed([out] data_t* encrypted_blob);
        public void enclave_libdogecoin_generate_master_key([out] data_t* encrypted_blob);

        public void enclave_libdogecoin_generate_mnemonic([out] data_t* encrypted_blob, char* mnemonic, char* shared_secret, char* mnemonic_in, char* entropy_size, char* password);
        public void enclave_libdogecoin_generate_extended_public_key([in] const data_t* encrypted_blob, char* custom_path, char* pubkey, uint32_t account, char* change_level, const uint32_t auth_token, char* password);
        public void enclave_libdogecoin_generate_address([in] const data_t* encrypted_blob, char* custom_path, char* addresses, uint32_t account, uint32_t address_index, char* change_level, uint32_t num_addresses, const uint32_t auth_token, char* password);
        public void enclave_libdogecoin_sign_message([in] const data_t* encrypted_blob, char* custom_path, char* message, char* signature, uint32_t account, uint32_t address_index, char* change_level, const uint32_t auth_token, char* password);
        public void enclave_libdogecoin_sign_transaction([in] const data_t* encrypted_blob, char* custom_path, char* raw_tx, char* signed_tx, uint32_t account, uint32_t address_index, char* change_level, const uint32_t auth_token, char* password);
    };

    untrusted {
        void host_libdogecoin();
    };
};
